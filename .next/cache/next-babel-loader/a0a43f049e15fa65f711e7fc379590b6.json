{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malgin_vv\\\\Desktop\\\\React\\\\1\\\\pages\\\\post.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport Layout from '../components/layout';\nvar Title = styled.h1.withConfig({\n  displayName: \"post__Title\",\n  componentId: \"sc-12xp8rh-0\"\n})([\"font-size:50px;color:\", \";\"], function (_ref) {\n  var theme = _ref.theme;\n  return theme.colors.primary;\n});\n\nvar postPageContent = __jsx(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, __jsx(Title, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"Hello Vadim\"), __jsx(\"p\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, \"The best way to deploy your web app is as a static HTML app, if that's possible. With a static app, you can use a fast and efficient web server like NGINX or a cost-effective static hosting service like ZEIT now or GitHub pages. But not every app can be deployed as a static app. If your app needs to generate dynamic pages at the runtime, you can't deploy it as a static app. If you can categorize your app as a static app, you can build it with Next.js. Next.js 3.0 comes with a feature that allows you to export an app into a set of HTML pages. In this lesson, we are going to explore that feature. Let's get started.\"));\n\nfunction Post() {\n  return __jsx(Layout, {\n    content: postPageContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  });\n}\n\nexport default Post;","map":{"version":3,"sources":["C:/Users/malgin_vv/Desktop/React/1/pages/post.js"],"names":["React","styled","Layout","Title","h1","theme","colors","primary","postPageContent","Post"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,IAAMC,KAAK,GAAGF,MAAM,CAACG,EAAV;AAAA;AAAA;AAAA,mCAEA;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,CAACC,MAAN,CAAaC,OAA5B;AAAA,CAFA,CAAX;;AAKA,IAAMC,eAAe,GACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,knBAFJ,CADJ;;AAaC,SAASC,IAAT,GAAgB;AACf,SAAO,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAED,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAED,eAAeC,IAAf","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Layout from '../components/layout'\r\n\r\nconst Title = styled.h1`\r\n  font-size: 50px;\r\n  color: ${({ theme }) => theme.colors.primary};\r\n`\r\n\r\nconst postPageContent = (\r\n    <div>\r\n        <Title>Hello Vadim</Title>\r\n        <p>\r\n            The best way to deploy your web app is as a static HTML app, if that's possible. With a static app, you can use a fast and efficient web server like NGINX \r\n            or a cost-effective static hosting service like ZEIT now or GitHub pages.\r\n            But not every app can be deployed as a static app. If your app needs to generate dynamic pages at the runtime, you can't deploy it as a static app.\r\n            If you can categorize your app as a static app, you can build it with Next.js. Next.js 3.0 comes with a feature that allows you to export an app into a set of HTML pages.\r\n            In this lesson, we are going to explore that feature. Let's get started.\r\n        </p>\r\n    </div>\r\n)\r\n\r\n function Post() {\r\n  return <Layout content={postPageContent} />\r\n}\r\n\r\nexport default Post"]},"metadata":{},"sourceType":"module"}